---
description: This document serves as the foundational guide for ALL development in the TikTok Template Tracker project. These principles MUST be applied to every component, feature, and interaction throughout the application.
globs: 
---
# Unicorn UX/UI Implementation Guide

This document serves as the foundational guide for ALL development in the TikTok Template Tracker project. These principles MUST be applied to every component, feature, and interaction throughout the application.

## Core Principles (Apply to EVERYTHING)

### 1. Invisible Interface
- Technology should disappear, creating direct connection between user intent and outcome
- Users should never need to think about how to use the interface - it should feel intuitive
- Interfaces should be as minimal as possible while maintaining functionality
- Controls should appear only when needed and where expected
- Maintain consistency with TikTok native patterns for familiarity

### 2. Emotional Design
- Every interaction should evoke positive emotions
- Micro-interactions must provide immediate, satisfying feedback
- Transitions should feel natural and purposeful
- Celebrate user accomplishments with appropriate animations/feedback
- Personalize experiences based on user behavior and preferences
- Use encouraging, positive language throughout

### 3. Contextual Intelligence
- Anticipate user needs before they articulate them
- Present the right options at the right time based on user context
- Adapt to user behavior patterns over time
- Understand the "why" behind user actions, not just the "what"
- Gradually reveal advanced features as users demonstrate mastery

### 4. Progressive Disclosure
- Information and functionality must be revealed progressively as needed
- Prevent overwhelm while still providing power and depth
- Complex capabilities should unfold naturally through discovery
- Primary actions should be immediately visible, secondary actions revealed contextually
- Advanced options should be accessible but not obtrusive

### 5. Sensory Harmony
- Visual elements, motion, and feedback must work together coherently
- Animations must serve specific purposes (orientation, feedback, attention)
- Create a multisensory experience that feels natural
- Maintain consistent timing and easing in animations
- Develop a cohesive color system with semantic meaning

## Implementation Requirements (ALL Components)

### Development Principles
1. **No Conventional UI When Better Options Exist**: Avoid traditional UI patterns if a more invisible alternative exists
2. **Context-First Development**: Build features around user context rather than abstract functionality
3. **Feedback-Driven Interactions**: Every user action must have appropriate feedback
4. **Motion With Purpose**: All animations must serve a functional purpose
5. **Continuous Adaptability**: Components should adapt to user behavior over time

### Technical Implementation
For ALL React components:
- Implement context-awareness through proper use of React Context
- Build components that adapt their rendering based on user history/behavior
- Use ResizeObserver and IntersectionObserver for contextual rendering
- Implement sensible defaults that adjust based on usage patterns
- Create smooth transitions between states (min 60fps)
- Use lazy loading and code splitting to reduce cognitive load during tasks
- Ensure all interactions are accessible via keyboard, touch, and mouse

### Testing Requirements
All components MUST be tested for:
- Intuitive discovery (can users find functionality without instruction?)
- Emotional response (do interactions feel satisfying?)
- Contextual appropriateness (do options appear at the right time?)
- Progressive complexity (are advanced options revealed appropriately?)
- Sensory cohesion (do visuals, motion, and feedback work together?)

## Application Across Project Phases

### Data Architecture
- Data models should support contextual adaptation (user preferences, history)
- State management should enable seamless transitions between contexts
- API responses should include contextual relevance scoring

### Component Development
- All UI elements must implement the appropriate microinteractions
- Form inputs should anticipate likely user inputs
- Navigation should adapt based on user workflow patterns
- Feedback mechanisms should be emotionally appropriate to the context

### Integration Requirements
- Features must share contextual awareness through shared context providers
- Transitions between features should maintain spatial continuity
- State persistence must enable seamless cross-feature workflows
- System-wide cohesion in motion, color, and interaction patterns must be maintained

## Checklist for Every PR

- [ ] Does this implementation minimize cognitive load?
- [ ] Are interactions emotionally satisfying?
- [ ] Does the component adapt to user context?
- [ ] Is complexity revealed progressively?
- [ ] Do visual, motion, and interaction elements work in harmony?
- [ ] Is the implementation consistent with TikTok native patterns?
- [ ] Does the feature anticipate user needs?

**Important**: These principles are NON-NEGOTIABLE and must be incorporated into EVERY aspect of development. They are not "nice-to-have" features but core requirements that define the product experience.